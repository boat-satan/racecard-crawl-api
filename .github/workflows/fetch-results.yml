name: Fetch All Results

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      mode:
        description: "実行モード: full(全場1..12R) / auto(締切+N分経過のみ) / kobetsu(個別)"
        type: choice
        options: [full, auto, kobetsu]
        default: full
      date:
        description: "YYYYMMDD（未入力ならJSTの今日）"
        required: false
        type: string
      pids:
        description: "場コード 01..24 をカンマ区切りで（full/autoで未指定なら01..24）"
        required: false
        type: string
      races:
        description: "kobetsu用: 5R / 1,3,5R / 1..12R（mode=kobetsu以外は無視）"
        required: false
        type: string
      skipExisting:
        description: "既存jsonがあればスキップ"
        type: boolean
        default: true
      autoAfterMin:
        description: "auto用: 締切から何分後に取得するか"
        required: false
        type: number
        default: 10

  #（任意）定期実行: 09:00-21:00 JST の毎時（必要に応じて調整）
  schedule:
    - cron: "0 0-12 * * *"  # UTC → JST+9（0..12UTC = 9..21JST）

permissions:
  contents: read

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.out.outputs.date }}
      mode: ${{ steps.out.outputs.mode }}
      races: ${{ steps.out.outputs.races }}
      skip: ${{ steps.out.outputs.skip }}
      afterMin: ${{ steps.out.outputs.afterMin }}
      pids_json: ${{ steps.out.outputs.pids_json }}
    steps:
      - name: Resolve parameters
        id: out
        shell: bash
        run: |
          # ==== DATE（JST今日デフォルト）====
          if [ -n "${{ inputs.date }}" ]; then
            DATE="${{ inputs.date }}"
          else
            DATE="$(TZ=Asia/Tokyo date +%Y%m%d)"
          fi

          MODE="${{ inputs.mode }}"
          if [ -z "$MODE" ]; then MODE="full"; fi

          # ==== PIDS ====
          if [ -n "${{ inputs.pids }}" ]; then
            RAW_PIDS="${{ inputs.pids }}"
          else
            # デフォルトは 01..24（全場）
            RAW_PIDS="$(printf '01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24')"
          fi

          # 正規化（ゼロパディング2桁 & ユニーク）
          norm_pid() {
            v="$1"
            v="${v//[^0-9,]/}"  # 数字とカンマ以外削除
            IFS=',' read -ra arr <<< "$v"
            declare -A seen
            out=""
            for x in "${arr[@]}"; do
              [ -z "$x" ] && continue
              x=$(printf '%02d' "$x")
              if [ -z "${seen[$x]}" ]; then
                seen[$x]=1
                if [ -z "$out" ]; then out="$x"; else out="$out,$x"; fi
              fi
            done
            echo "$out"
          }
          PIDS="$(norm_pid "$RAW_PIDS")"

          # ==== RACES ====
          case "$MODE" in
            full)
              RACES="1..12R"
              ;;
            kobetsu)
              if [ -z "${{ inputs.races }}" ]; then
                echo "::error::mode=kobetsu ですが races が未指定です"
                exit 1
              fi
              RACES="${{ inputs.races }}"
              ;;
            auto|*)
              RACES="auto"
              ;;
          esac

          # ==== スキップフラグ ====
          if [ "${{ inputs.skipExisting }}" = "true" ]; then
            SKIP="--skip-existing"
          else
            SKIP=""
          fi

          AFTER_MIN="${{ inputs.autoAfterMin }}"
          if [ -z "$AFTER_MIN" ]; then AFTER_MIN=10; fi

          # 行列用にJSON配列へ
          # 例: "01,02,05" → ["01","02","05"]
          PIDS_JSON=$(printf '[%s]\n' "$(echo "$PIDS" | sed 's/,/","/g;s/^/"/;s/$/"/')")

          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "races=$RACES" >> $GITHUB_OUTPUT
          echo "skip=$SKIP" >> $GITHUB_OUTPUT
          echo "afterMin=$AFTER_MIN" >> $GITHUB_OUTPUT
          echo "pids_json=$PIDS_JSON" >> $GITHUB_OUTPUT

  fetch:
    needs: plan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 8            # 同時実行しすぎを防ぐ。必要なら増減
      matrix:
        pid: ${{ fromJson(needs.plan.outputs.pids_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci --no-audit --no-fund

      - name: Fetch results for one venue
        env:
          TARGET_DATE: ${{ needs.plan.outputs.date }}
          TARGET_PIDS: ${{ matrix.pid }}
          TARGET_RACES: ${{ needs.plan.outputs.races }}
          RESULT_AUTO_AFTER_MIN: ${{ needs.plan.outputs.afterMin }}
        run: |
          echo "[info] DATE=$TARGET_DATE PID=$TARGET_PIDS RACES=$TARGET_RACES AFTER_MIN=$RESULT_AUTO_AFTER_MIN"
          node scripts/fetch-result-direct.js "$TARGET_DATE" "$TARGET_PIDS" "$TARGET_RACES" ${{ needs.plan.outputs.skip }}

      - name: List outputs (this venue)
        if: always()
        run: |
          find public/results/v1/${{ needs.plan.outputs.date }}/${{ matrix.pid }} -type f -name "*.json" -printf "%P\n" 2>/dev/null || true

  summarize:
    needs: [plan, fetch]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Done
        run: |
          echo "Completed: date=${{ needs.plan.outputs.date }} mode=${{ needs.plan.outputs.mode }}"