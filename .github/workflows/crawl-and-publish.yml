# .github/workflows/crawl-publish.yml
name: Crawl & Publish

on:
  workflow_dispatch:
    inputs:
      date:
        description: "TARGET_DATE: today | YYYYMMDD | YYYY-MM-DD（既定: today）"
        required: false
        default: "today"
      pid:
        description: "TARGET_PID: ALL | 02 | カンマ区切り（既定: ALL）"
        required: false
        default: "ALL"
      race:
        description: "TARGET_RACE: ALL | 1..12 | 1R | カンマ区切り（既定: ALL）"
        required: false
        default: "ALL"
      delayMs:
        description: "STATS_DELAY_MS: 1選手ごとの待機(ms)"
        required: false
        default: "3000"
      freshHours:
        description: "FRESH_HOURS: 既存JSONが新しければスキップする時間(時)"
        required: false
        default: "12"
  schedule:
    - cron: "0 20 * * *"  # 05:00 JST

permissions:
  contents: write

concurrency:
  group: crawl-publish
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm install --no-audit --no-fund

      - name: Configure git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true

      # 1) 出走表をクロール
      - name: Run crawler (programs)
        env:
          TARGET_DATE: ${{ inputs.date || 'today' }}
          TARGET_PID:  ${{ inputs.pid  || 'ALL' }}
          TARGET_RACE: ${{ inputs.race || 'ALL' }}
        run: node scripts/crawl.js

      # 2) 出走表だけ先に commit & push（途中で stats 失敗しても出走表は残す）
      - name: Commit & Push programs first
        run: |
          set -e
          git add public/programs public/programs-slim || true
          if git diff --cached --quiet; then
            echo "No program changes to commit."
          else
            DATE_VAL="${{ inputs.date || 'today' }}"
            git commit -m "Update programs (${DATE_VAL}) [skip ci]"
            n=0
            until [ $n -ge 5 ]
            do
              if git push; then
                echo "Pushed programs successfully."
                break
              fi
              echo "Push rejected. Rebasing and retrying... ($((n+1))/5)"
              git pull --rebase --autostash || true
              n=$((n+1))
              sleep 2
            done
          fi

      # 3) 出走表から登録番号を収集（ALL指定を考慮）
      - name: Collect racer numbers from programs
        id: collect
        env:
          IN_DATE: ${{ inputs.date || 'today' }}
          IN_PID:  ${{ inputs.pid  || 'ALL' }}
          IN_RACE: ${{ inputs.race || 'ALL' }}
        run: |
          set -euo pipefail

          # 日付正規化（JST）
          if [ -z "$IN_DATE" ] || [ "$IN_DATE" = "today" ]; then
            DATE=$(TZ=Asia/Tokyo date +'%Y%m%d')
          else
            DATE="${IN_DATE//-/}"
          fi
          echo "DATE=$DATE" | tee -a $GITHUB_ENV

          # PID/RACE 正規化
          PID_FILTER="$IN_PID"
          RACE_FILTER="$IN_RACE"

          node -e '
            const fs=require("fs");
            const path=require("path");
            const DATE=process.env.DATE;
            const PIDF=process.env.PID_FILTER || "ALL";
            const RF=process.env.RACE_FILTER || "ALL";

            function pad2(n){ return String(n).padStart(2,"0"); }
            function listDirs(p){ return fs.existsSync(p)? fs.readdirSync(p).filter(f=>fs.statSync(path.join(p,f)).isDirectory()):[]; }
            function listFiles(p){ return fs.existsSync(p)? fs.readdirSync(p).filter(f=>fs.statSync(path.join(p,f)).isFile()):[]; }

            const roots = [
              path.join("public","programs","v2",DATE),
              path.join("public","programs-slim","v2",DATE),
            ].filter(p=>fs.existsSync(p));

            if(roots.length===0){
              console.error("No programs directory for date:", DATE);
              process.exit(0);
            }

            // どの PID を対象にするか
            let pids=[];
            if (PIDF==="ALL") {
              const s=new Set();
              for(const r of roots){ for(const d of listDirs(r)){ if(/^\d{2}$/.test(d)) s.add(d); } }
              pids=[...s].sort();
            } else {
              const s=new Set();
              PIDF.split(",").map(sv=>sv.trim()).filter(Boolean).forEach(v=>{
                const m=v.match(/^\d+$/)? pad2(v) : v; // 最低限: 数字のみ→2桁
                s.add(m);
              });
              pids=[...s];
            }

            // どの RACE を対象にするか
            let races=[];
            if (RF==="ALL"){
              races = Array.from({length:12},(_,i)=>`${i+1}R`);
            } else {
              const s=new Set();
              RF.split(",").map(sv=>sv.trim()).filter(Boolean).forEach(v=>{
                const n=String(v).toUpperCase().replace(/[^0-9]/g,"");
                if(n && Number(n)>=1 && Number(n)<=12) s.add(`${Number(n)}R`);
              });
              races=[...s];
            }

            const regSet=new Set();
            for(const pid of pids){
              for(const race of races){
                const candidates = roots.map(root=>path.join(root,pid,`${race}.json`));
                const p = candidates.find(fp=>fs.existsSync(fp));
                if(!p) continue;
                try{
                  const j=JSON.parse(fs.readFileSync(p,"utf8"));
                  const arr = j.entries || j.boats || [];
                  for(const e of arr){
                    const n = Number(e.number ?? e.racer_number ?? e.id);
                    if(n) regSet.add(n);
                  }
                }catch(e){ /* ignore */ }
              }
            }

            const regs=[...regSet].sort((a,b)=>a-b);
            fs.writeFileSync("racers.txt", regs.join("\n"));
            console.log("RACERS:", regs.length);
          '

          echo "Collected racers:"
          head -n 50 racers.txt || true
          echo "RACERS_COUNT=$(wc -l < racers.txt || echo 0)" | tee -a $GITHUB_ENV

      # 4) スタッツを10件ごとに取得 → その都度 commit & push
      - name: Fetch stats in chunks (commit & push every 10)
        if: env.RACERS_COUNT != '0'
        env:
          STATS_DELAY_MS: ${{ inputs.delayMs || '3000' }}
          FRESH_HOURS:    ${{ inputs.freshHours || '12' }}
        run: |
          set -euo pipefail

          CHUNK=10
          i=0
          total=$(wc -l < racers.txt)
          while :; do
            start=$((i*CHUNK+1))
            [ $start -le $total ] || break
            end=$((start+CHUNK-1))
            if [ $end -gt $total ]; then end=$total; fi

            echo "Processing racers $start..$end / $total"

            RACERS=$(sed -n "${start},${end}p" racers.txt | paste -sd, -)
            export RACERS

            # 取得（既存 fetch-stats.js をそのまま利用）
            STATS_OVERWRITE="0" node scripts/fetch-stats.js

            # その場で commit & push
            git add public/stats/v2/racers || true
            if git diff --cached --quiet; then
              echo "No stats changes in this chunk."
            else
              git commit -m "Update racer stats chunk ${i} [skip ci]" || true
              n=0
              until [ $n -ge 5 ]
              do
                if git push; then
                  echo "Pushed stats chunk ${i}."
                  break
                fi
                echo "Push rejected. Rebasing and retrying... ($((n+1))/5)"
                git pull --rebase --autostash || true
                n=$((n+1))
                sleep 2
              done
            fi

            i=$((i+1))
          done

      # 5) 最後に「差分が残っていれば」念のためまとめて push（基本は何も残らない想定）
      - name: Final commit & push (if any)
        run: |
          set -e
          git add -A
          if git diff --cached --quiet; then
            echo "No remaining changes."
            exit 0
          fi
          DATE_VAL="${{ inputs.date || 'today' }}"
          git commit -m "Final updates (${DATE_VAL}) [skip ci]"
          n=0
          until [ $n -ge 5 ]
          do
            if git push; then
              echo "Pushed final changes."
              exit 0
            fi
            echo "Push rejected. Rebasing and retrying... ($((n+1))/5)"
            git pull --rebase --autostash || true
            n=$((n+1))
            sleep 2
          done
          echo "ERROR: Failed to push after retries."
          exit 1
