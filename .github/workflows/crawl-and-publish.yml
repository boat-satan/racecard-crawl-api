# .github/workflows/crawl-publish.yml
name: Crawl & Publish

on:
  workflow_dispatch:
    inputs:
      date:
        description: "TARGET_DATE: today | YYYYMMDD | YYYY-MM-DD（既定: today）"
        required: false
        default: "today"
      pid:
        description: "TARGET_PID: ALL | 02 | 場名 | カンマ区切り（既定: ALL）"
        required: false
        default: "ALL"
      race:
        description: "TARGET_RACE: ALL | 1..12 | 1R | カンマ区切り（既定: ALL）"
        required: false
        default: "ALL"
      delayMs:
        description: "STATS_DELAY_MS: 1選手ごとの待機(ms)"
        required: false
        default: "3000"
      freshHours:
        description: "FRESH_HOURS: 既存JSONが新しければスキップする時間(時)"
        required: false
        default: "12"
  schedule:
    - cron: "0 20 * * *"  # 05:00 JST

permissions:
  contents: write

concurrency:
  group: crawl-publish
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm install --no-audit --no-fund

      - name: Configure git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true

      # === ここで 'today' を必ず YYYYMMDD に解決（UTC→JSTでもOKならTZ=Asia/Tokyoに）
      - name: Resolve DATE (normalize)
        run: |
          set -euo pipefail
          IN="${{ inputs.date || 'today' }}"
          if [ -z "$IN" ] || [ "$IN" = "today" ]; then
            DATE=$(TZ=Asia/Tokyo date +'%Y%m%d')
          else
            DATE="${IN//-/}"  # 2025-08-10 -> 20250810
          fi
          echo "DATE=$DATE" >> "$GITHUB_ENV"
          echo "TARGET_PID=${{ inputs.pid  || 'ALL' }}"   >> "$GITHUB_ENV"
          echo "TARGET_RACE=${{ inputs.race || 'ALL' }}"  >> "$GITHUB_ENV"
          echo "STATS_DELAY_MS=${{ inputs.delayMs || '3000' }}" >> "$GITHUB_ENV"
          echo "FRESH_HOURS=${{ inputs.freshHours || '12' }}"   >> "$GITHUB_ENV"
          echo "Resolved DATE=$DATE"

      # 1) 出走表クロール（フィルタはそのまま）
      - name: Run crawler (programs)
        env:
          TARGET_DATE: ${{ env.DATE }}          # ← 正規化したDATEを渡す
          TARGET_PID:  ${{ env.TARGET_PID }}
          TARGET_RACE: ${{ env.TARGET_RACE }}
        run: node scripts/crawl.js

      # 2) 出走表を先に commit & push（競合時はrebaseして再試行）
      - name: Commit & Push programs first
        run: |
          set -e
          git add -A
          if git diff --cached --quiet; then
            echo "No program changes to commit."
          else
            git commit -m "Update programs (${DATE}) [skip ci]"
            n=0
            until [ $n -ge 5 ]; do
              if git push; then
                echo "Pushed programs successfully."
                break
              fi
              echo "Push rejected. Rebasing and retrying... ($((n+1))/5)"
              git pull --rebase --autostash || true
              n=$((n+1))
              sleep 2
            done
          fi

      # 3) 出走表から登録番号を抽出（DATEは必ずYYYYMMDDになっている）
      - name: Collect racer numbers from programs
        run: |
          set -euo pipefail
          node -e '
            const fs = require("fs");
            const path = require("path");
            const root = process.cwd();
            const DATE = process.env.DATE;
            const dir = path.join(root, "public", "programs", "v2", DATE);
            function walk(p){
              if(!fs.existsSync(p)) return [];
              const st = fs.statSync(p);
              if(st.isFile() && p.endsWith(".json")){
                try{
                  const j = JSON.parse(fs.readFileSync(p, "utf8"));
                  const entries = j.entries || j.boats || [];
                  return entries.map(e => Number(e.number ?? e.racer_number ?? e.id)).filter(Boolean);
                }catch{ return []; }
              }
              if(st.isDirectory()){
                return fs.readdirSync(p).flatMap(n => walk(path.join(p,n)));
              }
              return [];
            }
            const nums = Array.from(new Set(walk(dir))).sort((a,b)=>a-b);
            fs.writeFileSync("racers.list", nums.join("\n") + "\n", "utf8");
            console.log("RACERS:", nums.length);
          '

      # 4) スタッツを10件ごとに取得→commit & push
      - name: Fetch stats in chunks (commit & push every 10)
        env:
          STATS_DELAY_MS: ${{ env.STATS_DELAY_MS }}
          FRESH_HOURS:    ${{ env.FRESH_HOURS }}
        run: |
          set -euo pipefail
          if [ ! -s racers.list ]; then
            echo "No racers found. Skipping stats."
            exit 0
          fi

          mapfile -t ALL < racers.list
          total=${#ALL[@]}
          echo "Total racers: $total"

          chunk=0
          start=0
          while [ $start -lt $total ]; do
            end=$(( start + 10 ))
            [ $end -gt $total ] && end=$total

            # chunk 配列をカンマ連結
            PART=("${ALL[@]:$start:$((end-start))}")
            RACERS_CSV=$(IFS=, ; echo "${PART[*]}")

            echo "Chunk $((chunk+1)): $RACERS_CSV"

            # 取得（RACERSにだけ絞って渡す。他フィルタはinputsを継承）
            TARGET_DATE="${DATE}" \
            TARGET_PID="${{ env.TARGET_PID }}" \
            TARGET_RACE="${{ env.TARGET_RACE }}" \
            RACERS="${RACERS_CSV}" \
            STATS_BATCH="" \
            STATS_DELAY_MS="${STATS_DELAY_MS}" \
            FRESH_HOURS="${FRESH_HOURS}" \
            STATS_OVERWRITE="0" \
              node scripts/fetch-stats.js

            # このチャンクだけ先に commit & push
            git add -A
            if git diff --cached --quiet; then
              echo "No stats changes in this chunk."
            else
              git commit -m "Update racer stats ${DATE} (chunk $((chunk+1))) [skip ci]"
              n=0
              until [ $n -ge 5 ]; do
                if git push; then
                  echo "Pushed stats (chunk $((chunk+1)))."
                  break
                fi
                echo "Push rejected. Rebasing and retrying... ($((n+1))/5)"
                git pull --rebase --autostash || true
                n=$((n+1))
                sleep 2
              done
            fi

            start=$end
            chunk=$((chunk+1))
          done

      # 5) 念のための最終 commit & push（差分があれば）
      - name: Final commit & push (if any)
        run: |
          set -e
          git add -A
          if git diff --cached --quiet; then
            echo "No remaining changes."
            exit 0
          fi
          git commit -m "Finalize crawl & stats (${DATE}) [skip ci]"
          n=0
          until [ $n -ge 5 ]; do
            if git push; then
              echo "Pushed final changes."
              exit 0
            fi
            echo "Push rejected. Rebasing and retrying... ($((n+1))/5)"
            git pull --rebase --autostash || true
            n=$((n+1))
            sleep 2
          done
          echo "ERROR: Failed to push after retries."
          exit 1
