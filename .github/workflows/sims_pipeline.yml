name: sims_pipeline

on:
  workflow_dispatch:
    inputs:
      DATE:
        description: "対象日 (YYYYMMDD)"
        required: true
        type: string
      PIDS:
        description: "カンマ区切りの開催ID。未指定なら01-24全部"
        required: false
        type: string
        default: ""
      SIMS:
        description: "SimSの試行回数/レース"
        required: false
        type: string
        default: "600"
      TOPN:
        description: "三連単のTOPN"
        required: false
        type: string
        default: "18"
      UNIT:
        description: "1点あたり(円)"
        required: false
        type: string
        default: "100"
      OUTDIR:
        description: "出力ルート(例: scripts/sims)"
        required: false
        type: string
        default: "scripts/sims"

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      pid_list: ${{ steps.split.outputs.pids_json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: split
        name: Build PID matrix JSON
        env:
          PIDS_IN: ${{ inputs.PIDS }}
        run: |
          python - <<'PY'
import os, json
p = os.environ.get("PIDS_IN","").strip()
if p:
    arr = [x.strip() for x in p.split(",") if x.strip()]
else:
    arr = [f"{i:02d}" for i in range(1,25)]
js = json.dumps([{"pid":x} for x in arr], ensure_ascii=False)
print(f"pids_json={js}")
with open(os.environ["GITHUB_OUTPUT"],"a",encoding="utf-8") as f:
    f.write(f"pids_json={js}\n")
PY

  pass1:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.pid_list) }}
    env:
      DATE:   ${{ inputs.DATE }}
      PID:    ${{ matrix.pid }}
      SIMS:   ${{ inputs.SIMS }}
      TOPN:   ${{ inputs.TOPN }}
      UNIT:   ${{ inputs.UNIT }}
      OUTDIR: ${{ inputs.OUTDIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install numpy pandas joblib scikit-learn

      - name: Run simsv2 (predict-only, no keyman)
        run: |
          set -euo pipefail
          echo "[pass1] DATE=$DATE PID=$PID SIMS=$SIMS TOPN=$TOPN OUTDIR=$OUTDIR"
          python scripts/sims/simsv2.py \
            --base public \
            --dates "$DATE" \
            --pids "$PID" \
            --sims "$SIMS" \
            --topn "$TOPN" \
            --unit "$UNIT" \
            --predict-only \
            --outdir "$OUTDIR"

      - name: Upload artifacts (per PID)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pass1_${{ env.DATE }}_${{ env.PID }}
          path: |
            ${{ env.OUTDIR }}/pass1/predict/**
          if-no-files-found: warn

  aggregate:
    runs-on: ubuntu-latest
    needs: pass1
    env:
      DATE:   ${{ inputs.DATE }}
      SIMS:   ${{ inputs.SIMS }}
      TOPN:   ${{ inputs.TOPN }}
      UNIT:   ${{ inputs.UNIT }}
      OUTDIR: ${{ inputs.OUTDIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas

      - name: Aggregate predictions and write overall.json
        run: |
          set -euo pipefail
          python - <<'PY'
import os, json, glob, pandas as pd

OUTDIR = os.environ["OUTDIR"]
DATE   = os.environ["DATE"]
SIMS   = int(os.environ["SIMS"])
TOPN   = int(os.environ["TOPN"])
UNIT   = int(os.environ["UNIT"])

pass1 = os.path.join(OUTDIR,"pass1")
pred_dir = os.path.join(pass1,"predict")
os.makedirs(pass1, exist_ok=True)

# 予測CSVの集計（存在すれば）
rows = []
for path in glob.glob(os.path.join(pred_dir, "predictions_summary.csv")):
    try:
        df = pd.read_csv(path)
        rows.append(df)
    except Exception:
        pass

races = 0
bets_total = 0
if rows:
    df_all = pd.concat(rows, ignore_index=True)
    races = df_all[["date","pid","race"]].drop_duplicates().shape[0]
    bets_total = df_all["rank"].max() if "rank" in df_all else 0

overall = {
    "engine": "SimS ver1.0 (E1, no-keyman)",
    "pass":   "pass1",
    "races":  int(races),
    "bets_total": int(bets_total),
    "stake_total": int(bets_total * UNIT),
    "payout_total": 0,
    "hit_rate": 0.0,
    "roi": 0.0,
    "sims_per_race": int(SIMS),
    "topn": int(TOPN),
    "unit": int(UNIT),
}

out_path = os.path.join(pass1, "overall.json")
with open(out_path, "w", encoding="utf-8") as f:
    json.dump(overall, f, ensure_ascii=False, indent=2)
print(f"[overall] wrote {out_path}")
PY

      - name: Commit aggregated results
        if: always()
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add ${{ env.OUTDIR }}/pass1 || true
          git commit -m "sims_pipeline: pass1 overall.json for ${DATE}" || echo "nothing to commit"
          git pull --rebase || true
          git push || true

      - name: Upload overall.json
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pass1_overall_${{ env.DATE }}
          path: ${{ env.OUTDIR }}/pass1/overall.json
          if-no-files-found: warn
