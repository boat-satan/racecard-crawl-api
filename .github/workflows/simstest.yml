name: Run SimS

on:
  workflow_dispatch:
    inputs:
      base:      { description: "Path to public (repo rootからの相対 or 絶対)", required: false, default: "" }
      dates:     { description: "YYYYMMDD(カンマ区切り)", required: false, default: "" }
      sims:      { description: "Sims per race", required: false, default: "600" }
      topn:      { description: "TopN (trifecta_topN時)", required: false, default: "18" }
      unit:      { description: "Bet unit (JPY)", required: false, default: "100" }
      odds_min:  { description: "オッズ下限（例: 10）", required: false, default: "" }
      odds_max:  { description: "オッズ上限（例: 49.9）", required: false, default: "" }
      min_ev:    { description: "期待値しきい値 EV=p*odds（例: 1.2）", required: false, default: "" }
      params:
        description: "外部パラメータファイル(.toml/.json)のパス（例: params/freer-10.toml）"
        required: false
        default: ""
      filter:
        description: >-
          追加の絞り込み・上書き（;区切り）。例:
          pids=02,04;races=1R,2R;only_first1=true;odds_base=./public/odds/v1;
          odds_bands=01-09,10-19,20-49;require_odds=false;predict_only=false
        required: false
        default: ""

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: Asia/Tokyo
      PYTHON_SCRIPT: scripts/sims/sims.py

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install numpy pandas
          fi

      - name: Run SimS
        shell: bash
        run: |
          set -euo pipefail

          BASE_INPUT="${{ github.event.inputs.base || '' }}"
          DATES="${{ github.event.inputs.dates || '' }}"
          SIMS="${{ github.event.inputs.sims || '600' }}"
          TOPN="${{ github.event.inputs.topn || '18' }}"
          UNIT="${{ github.event.inputs.unit || '100' }}"

          # 追加昇格分
          ODDS_MIN_IN="${{ github.event.inputs.odds_min || '' }}"
          ODDS_MAX_IN="${{ github.event.inputs.odds_max || '' }}"
          MIN_EV_IN="${{ github.event.inputs.min_ev || '' }}"
          PARAMS_FILE="${{ github.event.inputs.params || '' }}"

          # 固定ロジック
          STRATEGY="trifecta_topN"

          FILTER="${{ github.event.inputs.filter || '' }}"

          # repo 直下 public をデフォルトに
          if [ -z "$BASE_INPUT" ]; then
            BASE="public"
          else
            BASE="$BASE_INPUT"
          fi

          # filter のパース
          PIDS=""; RACES=""
          ONLY="false"
          ODDS_BASE=""
          # 既定: require_odds は true（filter で false に上書き可）
          REQUIRE_ODDS="true"
          ODDS_BANDS=""
          ODDS_MIN="$ODDS_MIN_IN"
          ODDS_MAX="$ODDS_MAX_IN"
          MIN_EV="$MIN_EV_IN"
          PREDICT_ONLY="false"

          if [ -n "$FILTER" ]; then
            IFS=';' read -r -a parts <<< "$FILTER"
            for kv in "${parts[@]}"; do
              key="$(echo "${kv%%=*}" | tr '[:upper:]' '[:lower:]')"
              val="${kv#*=}"
              case "$key" in
                pids)           PIDS="$val" ;;
                races)          RACES="$val" ;;
                only_first1)    ONLY="$val" ;;
                odds_base)      ODDS_BASE="$val" ;;
                min_ev)         MIN_EV="$val" ;;          # 入力欄より filter が優先
                require_odds)   REQUIRE_ODDS="$val" ;;
                odds_bands)     ODDS_BANDS="$val" ;;
                odds_min)       ODDS_MIN="$val" ;;        # 入力欄より filter が優先
                odds_max)       ODDS_MAX="$val" ;;        # 入力欄より filter が優先
                predict_only)   PREDICT_ONLY="$val" ;;
              esac
            done
          fi

          # デフォルトのオッズディレクトリ（未指定時）
          if [ -z "$ODDS_BASE" ]; then
            ODDS_BASE="$BASE/odds/v1"
          fi

          echo "[debug] BASE=$BASE"
          echo "[debug] DATES=${DATES:-'(none)'}  SIMS=$SIMS  TOPN=$TOPN  UNIT=$UNIT"
          echo "[debug] ODDS_BASE=$ODDS_BASE  REQUIRE_ODDS=$REQUIRE_ODDS"
          echo "[debug] ODDS_BANDS=${ODDS_BANDS:-'(none)'}  ODDS_MIN=${ODDS_MIN:-'(none)'}  ODDS_MAX=${ODDS_MAX:-'(none)'}"
          echo "[debug] MIN_EV=${MIN_EV:-'(none)'}  ONLY_FIRST1=$ONLY  PREDICT_ONLY=$PREDICT_ONLY"
          echo "[debug] PARAMS_FILE=${PARAMS_FILE:-'(none)'}"
          [ -d "$BASE" ] && ls -la "$BASE" || true

          ARGS=( --base "$BASE" --sims "$SIMS" --unit "$UNIT" --strategy "$STRATEGY" --topn "$TOPN" )
          [ -n "$DATES" ] && ARGS+=( --dates "$DATES" )
          [ -n "$PIDS"  ] && ARGS+=( --pids "$PIDS" )
          [ -n "$RACES" ] && ARGS+=( --races "$RACES" )

          # 1着=1号艇のみを filter から指定可（exclude は廃止）
          if [ "${ONLY,,}" = "true" ]; then
            ARGS+=( --only-first1 )
          fi

          # 予測のみ
          if [ "${PREDICT_ONLY,,}" = "true" ]; then
            ARGS+=( --predict-only )
          fi

          # EV/オッズ関連
          [ -n "$ODDS_BASE" ] && ARGS+=( --odds-base "$ODDS_BASE" )
          if [ -n "$MIN_EV" ]; then
            ARGS+=( --min-ev "$MIN_EV" )
          fi
          if [ "${REQUIRE_ODDS,,}" = "true" ]; then
            ARGS+=( --require-odds )
          fi

          # オッズバンド（複数帯 or 単一レンジ）
          if [ -n "$ODDS_BANDS" ]; then
            ARGS+=( --odds-bands "$ODDS_BANDS" )
          else
            [ -n "$ODDS_MIN" ] && ARGS+=( --odds-min "$ODDS_MIN" )
            [ -n "$ODDS_MAX" ] && ARGS+=( --odds-max "$ODDS_MAX" )
          fi

          # 外部パラメータファイル
          if [ -n "$PARAMS_FILE" ]; then
            ARGS+=( --params "$PARAMS_FILE" )
          fi

          echo "[debug] args: ${ARGS[*]}"
          python "$PYTHON_SCRIPT" "${ARGS[@]}" --outdir scripts/sims

      - name: Commit results into repo
        run: |
          set -eux
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add scripts/sims/*.csv scripts/sims/*.json || true
          git commit -m "SimS outputs ($(date +'%Y-%m-%d %H:%M:%S %Z'))" || true
          git push || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sims-outputs
          path: |
            scripts/sims/*.csv
            scripts/sims/*.json
          if-no-files-found: warn
