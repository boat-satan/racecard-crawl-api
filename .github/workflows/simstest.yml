name: Run SimS

on:
  workflow_dispatch:
    inputs:
      base:      { description: "Path to public (repo rootからの相対 or 絶対)", required: false, default: "" }
      dates:     { description: "YYYYMMDD(カンマ区切り)", required: false, default: "" }
      sims:      { description: "Sims per race", required: false, default: "600" }
      topn:      { description: "TopN (trifecta_topN時)", required: false, default: "18" }
      unit:      { description: "Bet unit (JPY)", required: false, default: "100" }
      strategy:  { description: "trifecta_topN / exacta_topK_third_topM", required: false, default: "trifecta_topN" }
      k:         { description: "exactaのK", required: false, default: "2" }
      m:         { description: "thirdのM", required: false, default: "4" }
      filter:    { description: "例: pids=02,04;races=1R,2R;only_first1=true", required: false, default: "" }
      exclude_first1:
        description: "1着=1号艇の買い目を除外（true/false）"
        required: false
        default: "false"
      # --- EV / オッズ ---
      odds_base:
        description: "オッズJSONルート（public/odds/v1）"
        required: false
        default: "./public/odds/v1"
      min_ev:
        description: "EVしきい値（例: 1.2）"
        required: false
        default: "0"
      require_odds:
        description: "オッズが無い買い目/日付は評価しない"
        required: false
        default: "true"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: Asia/Tokyo

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install numpy pandas
          fi

      - name: Run SimS
        working-directory: scripts/sims
        shell: bash
        run: |
          set -euo pipefail

          BASE_INPUT="${{ github.event.inputs.base || '' }}"
          DATES_RAW="${{ github.event.inputs.dates || '' }}"
          SIMS="${{ github.event.inputs.sims || '600' }}"
          TOPN="${{ github.event.inputs.topn || '18' }}"
          UNIT="${{ github.event.inputs.unit || '100' }}"
          STRATEGY="${{ github.event.inputs.strategy || 'trifecta_topN' }}"
          KVAL="${{ github.event.inputs.k || '2' }}"
          MVAL="${{ github.event.inputs.m || '4' }}"
          FILTER="${{ github.event.inputs.filter || '' }}"
          EXCL="${{ github.event.inputs.exclude_first1 || 'false' }}"
          ODDS_BASE_INPUT="${{ github.event.inputs.odds_base || './public/odds/v1' }}"
          MIN_EV="${{ github.event.inputs.min_ev || '0' }}"
          REQUIRE_ODDS="${{ github.event.inputs.require_odds || 'true' }}"

          # scripts/sims から見たデフォルト public
          if [ -z "$BASE_INPUT" ]; then
            BASE="../../public"
          else
            BASE="$BASE_INPUT"
          fi
          # odds_base は相対/絶対どちらでもOK
          case "$ODDS_BASE_INPUT" in
            /*)  ODDS_BASE="$ODDS_BASE_INPUT" ;;
            *)   ODDS_BASE="$(realpath -m "$ODDS_BASE_INPUT")" ;;
          esac

          # filter のパース（pids=..;races=..;only_first1=true）
          PIDS=""
          RACES=""
          ONLY="false"
          if [ -n "$FILTER" ]; then
            IFS=';' read -r -a parts <<< "$FILTER"
            for kv in "${parts[@]}"; do
              key="${kv%%=*}"
              val="${kv#*=}"
              case "$key" in
                pids|PIDS)                  PIDS="$val" ;;
                races|RACES)                RACES="$val" ;;
                only_first1|ONLY_FIRST1)   ONLY="$val" ;;
              esac
            done
          fi

          # 排他チェック（exclude & only の同時指定は不可）
          if [ "${EXCL,,}" = "true" ] && [ "${ONLY,,}" = "true" ]; then
            echo "::error ::exclude_first1 と only_first1 は同時指定できません"
            exit 1
          fi

          # dates 前処理 & オッズ存在チェック
          DATES=""
          if [ -n "$DATES_RAW" ]; then
            IFS=',' read -r -a ds <<< "$DATES_RAW"
            for d in "${ds[@]}"; do
              d="${d//-/}"                                # 2025-08-12 → 20250812
              if [ "${REQUIRE_ODDS,,}" = "true" ]; then
                if [ -d "$ODDS_BASE/$d" ]; then
                  DATES+="${d},"
                else
                  echo "::notice ::ODDS missing for date=$d at $ODDS_BASE/$d → skip"
                fi
              else
                DATES+="${d},"
              fi
            done
            DATES="${DATES%,}"  # 末尾カンマ除去
            if [ -z "$DATES" ] && [ -n "$DATES_RAW" ] && [ "${REQUIRE_ODDS,,}" = "true" ]; then
              echo "::warning ::全ての日付でオッズ未整備のため終了します（odds_base=$ODDS_BASE）"
              exit 0
            fi
          fi

          echo "[debug] CWD=$(pwd)"
          echo "[debug] BASE=$BASE"
          echo "[debug] ODDS_BASE=$ODDS_BASE"
          ls -la "$BASE" || true

          ARGS=( --base "$BASE" --sims "$SIMS" --unit "$UNIT" )
          [ -n "$DATES" ] && ARGS+=( --dates "$DATES" )
          [ -n "$PIDS"  ] && ARGS+=( --pids "$PIDS" )
          [ -n "$RACES" ] && ARGS+=( --races "$RACES" )

          if [ "$STRATEGY" = "exacta_topK_third_topM" ]; then
            ARGS+=( --strategy exacta_topK_third_topM --k "$KVAL" --m "$MVAL" )
          else
            ARGS+=( --strategy trifecta_topN --topn "$TOPN" )
          fi

          # 1着=1号艇の除外/のみ
          if [ "${EXCL,,}" = "true" ]; then
            ARGS+=( --exclude-first1 )
          fi
          if [ "${ONLY,,}" = "true" ]; then
            ARGS+=( --only-first1 )
          fi

          # EV / オッズ
          ARGS+=( --odds-base "$ODDS_BASE" )
          # MIN_EV は数値なら渡す（空/0はフィルタ無効）
          if [[ "$MIN_EV" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            if [ "$(printf '%.6f' "$MIN_EV")" != "0.000000" ]; then
              ARGS+=( --min-ev "$MIN_EV" )
            fi
          fi
          if [ "${REQUIRE_ODDS,,}" = "true" ]; then
            ARGS+=( --require-odds )
          fi

          echo "[debug] args: ${ARGS[*]}"
          # ← あなたの実行スクリプト名に合わせる（EV対応のPython）
          python sims_batch_eval_SimS_v1.py "${ARGS[@]}" --outdir .

      - name: Commit results into repo
        run: |
          set -eux
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add scripts/sims/*.csv scripts/sims/*.json || true
          git commit -m "SimS outputs ($(date +'%Y-%m-%d %H:%M:%S %Z'))" || true
          git push || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sims-outputs
          path: |
            scripts/sims/*.csv
            scripts/sims/*.json
          if-no-files-found: warn
