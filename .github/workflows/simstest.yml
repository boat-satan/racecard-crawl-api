name: Run SimS batch

on:
  workflow_dispatch:
    inputs:
      base:
        description: "public ディレクトリのパス"
        required: false
        default: "../../public"
      dates:
        description: "評価対象日(カンマ区切り)。空なら全日付を自動探索"
        required: false
        default: ""
      sims:
        description: "1レースあたりの試行回数"
        required: false
        default: "600"
      topn:
        description: "三連単TOPN（strategy=trifecta_topN のとき）"
        required: false
        default: "18"
      unit:
        description: "1点賭け金(円)"
        required: false
        default: "100"
      strategy:
        description: "買い目戦略 (trifecta_topN / exacta_topK_third_topM)"
        required: false
        default: "trifecta_topN"
      k:
        description: "2連単TOPK（strategy=exacta_topK_third_topM用）"
        required: false
        default: "2"
      m:
        description: "3着TOPM（strategy=exacta_topK_third_topM用）"
        required: false
        default: "4"
      pids:
        description: "場コードフィルタ(カンマ区切り) 例: 01,06"
        required: false
        default: ""
      races:
        description: "レース名フィルタ(カンマ区切り) 例: 1R,2R"
        required: false
        default: ""

  schedule:
    - cron: "15 6 * * *"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: Asia/Tokyo

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install numpy pandas

      - name: Preflight (count files & sample)
        working-directory: scripts/sims
        run: |
          python - <<'PY'
          import os, sys, json
          base = os.path.abspath(os.path.join(os.getcwd(), "../../public"))
          roots = {
            "integrated": os.path.join(base, "integrated", "v1"),
            "results":    os.path.join(base, "results", "v1"),
          }
          def walk(root):
            out=[]
            if not os.path.isdir(root):
              return out
            for d in os.listdir(root):
              p1=os.path.join(root,d)
              if not os.path.isdir(p1): continue
              for pid in os.listdir(p1):
                p2=os.path.join(p1,pid)
                if not os.path.isdir(p2): continue
                for fn in os.listdir(p2):
                  if fn.endswith(".json"):
                    out.append((d,pid,fn[:-5]))
            return set(out)
          ints = walk(roots["integrated"])
          ress = walk(roots["results"])
          both = ints & ress
          print(f"[preflight] integrated: {len(ints)} files")
          print(f"[preflight] results:    {len(ress)} files")
          print(f"[preflight] intersection (eval対象): {len(both)} files")
          print("[preflight] sample (up to 5):", sorted(list(both))[:5])
          PY

      - name: Run SimS
        working-directory: scripts/sims
        shell: bash
        run: |
          set -euxo pipefail
          BASE="${{ inputs.base || '../../public' }}"
          DATES="${{ inputs.dates }}"
          SIMS="${{ inputs.sims || '600' }}"
          TOPN="${{ inputs.topn || '18' }}"
          UNIT="${{ inputs.unit || '100' }}"
          STRATEGY="${{ inputs.strategy || 'trifecta_topN' }}"
          KVAL="${{ inputs.k || '2' }}"
          MVAL="${{ inputs.m || '4' }}"
          PIDS="${{ inputs.pids }}"
          RACES="${{ inputs.races }}"
          OUTDIR="."

          ARGS="--base \"$BASE\" --sims $SIMS --unit $UNIT"
          if [ -n "$DATES" ]; then ARGS="$ARGS --dates $DATES"; fi
          if [ -n "$PIDS" ];  then ARGS="$ARGS --pids $PIDS";  fi
          if [ -n "$RACES" ]; then ARGS="$ARGS --races $RACES"; fi
          if [ "$STRATEGY" = "exacta_topK_third_topM" ]; then
            ARGS="$ARGS --strategy exacta_topK_third_topM --k $KVAL --m $MVAL"
          else
            ARGS="$ARGS --strategy trifecta_topN --topn $TOPN"
          fi

          echo "[debug] using BASE=$BASE"
          echo "[debug] args=$ARGS"
          python sims.py $ARGS --outdir "$OUTDIR"

      - name: Commit results into repo
        shell: bash
        run: |
          set -eux
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add scripts/sims/*.csv scripts/sims/*.json || true
          git commit -m "SimS outputs ($(date +'%Y-%m-%d %H:%M:%S %Z'))" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Upload artifacts (backup)
        uses: actions/upload-artifact@v4
        with:
          name: sims-outputs
          path: |
            scripts/sims/*.csv
            scripts/sims/*.json
          if-no-files-found: warn
