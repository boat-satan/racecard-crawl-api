name: wf_pass3_sims_integrated

on:
  workflow_call:
    inputs:
      DATE:
        description: "YYYYMMDD"
        required: true
        type: string
      PID:
        description: "正規化済み PID（例: 01,02,...,24）"
        required: true
        type: string
      MODE:
        description: "predict or eval"
        required: true
        type: string
        default: "predict"
      SIMS:
        description: "試行回数/レース"
        required: true
        type: string
        default: "600"
      TOPN:
        description: "三連単 TOPN"
        required: true
        type: string
        default: "18"
      UNIT:
        description: "1点あたり(円)"
        required: true
        type: string
        default: "100"
      FILTERS:
        description: "例: require_odds=true,min_ev=1.2,odds_bands=01-09,10-19"
        required: false
        type: string
        default: ""
      KEYMAN:
        description: "例: enable=true,thr=0.7,boost=0.15,aggr=0.0,buy_in_top3=false,buy_thr=0.7"
        required: false
        type: string
        default: "enable=true,thr=0.7,boost=0.15,aggr=0.0,buy_in_top3=false,buy_thr=0.7"
      OUTDIR:
        description: "出力ディレクトリ"
        required: true
        type: string
        default: "scripts/sims"

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install numpy pandas joblib scikit-learn

      - name: Parse FILTERS & KEYMAN
        id: parse
        env:
          FILTERS: ${{ inputs.FILTERS }}
          KEYMAN:  ${{ inputs.KEYMAN }}
        run: |
          set -euo pipefail
          parse_kvlist () {
            local s="$1"; local prefix="$2"
            IFS=',' read -r -a pairs <<< "$s"
            for kv in "${pairs[@]}"; do
              kv="$(echo "$kv" | xargs)"
              [ -z "$kv" ] && continue
              if [[ "$kv" == *"="* ]]; then
                k="$(echo "${kv%%=*}" | tr '[:lower:]' '[:upper:]' | tr -c 'A-Z0-9_' '_' | xargs)"
                v="$(echo "${kv#*=}" | xargs)"
                echo "$prefix$k=$v" >> "$GITHUB_OUTPUT"
              fi
            done
          }
          # filter defaults
          {
            echo "F_REQUIRE_ODDS=false"
            echo "F_MIN_EV=0"
            echo "F_ODDS_BANDS="
            echo "F_ODDS_MIN=0"
            echo "F_ODDS_MAX=0"
            echo "F_EXCLUDE_FIRST1=false"
            echo "F_ONLY_FIRST1=false"
            echo "F_BUY_IN_TOP3=false"
            echo "F_BUY_THR=0.7"
          } >> "$GITHUB_OUTPUT"
          # keyman defaults
          {
            echo "K_ENABLE=true"
            echo "K_THR=0.7"
            echo "K_BOOST=0.15"
            echo "K_AGGR=0.0"
          } >> "$GITHUB_OUTPUT"

          [ -n "${FILTERS:-}" ] && parse_kvlist "$FILTERS" "F_"
          [ -n "${KEYMAN:-}" ]  && parse_kvlist "$KEYMAN"  "K_"

      - name: Run Pass2 (SimS integrated with ML)
        env:
          DATE:  ${{ inputs.DATE }}
          PID:   ${{ inputs.PID }}
          MODE:  ${{ inputs.MODE }}
          SIMS:  ${{ inputs.SIMS }}
          TOPN:  ${{ inputs.TOPN }}
          OUTDIR: ${{ inputs.OUTDIR }}
          # parsed filters
          F_REQUIRE_ODDS:   ${{ steps.parse.outputs.F_REQUIRE_ODDS }}
          F_MIN_EV:         ${{ steps.parse.outputs.F_MIN_EV }}
          F_ODDS_BANDS:     ${{ steps.parse.outputs.F_ODDS_BANDS }}
          F_ODDS_MIN:       ${{ steps.parse.outputs.F_ODDS_MIN }}
          F_ODDS_MAX:       ${{ steps.parse.outputs.F_ODDS_MAX }}
          F_EXCLUDE_FIRST1: ${{ steps.parse.outputs.F_EXCLUDE_FIRST1 }}
          F_ONLY_FIRST1:    ${{ steps.parse.outputs.F_ONLY_FIRST1 }}
          F_BUY_IN_TOP3:    ${{ steps.parse.outputs.F_BUY_IN_TOP3 }}
          F_BUY_THR:        ${{ steps.parse.outputs.F_BUY_THR }}
          # parsed keyman
          K_ENABLE: ${{ steps.parse.outputs.K_ENABLE }}
          K_THR:    ${{ steps.parse.outputs.K_THR }}
          K_BOOST:  ${{ steps.parse.outputs.K_BOOST }}
          K_AGGR:   ${{ steps.parse.outputs.K_AGGR }}
        run: |
          set -euo pipefail
          echo "[pass3] MODE=$MODE DATE=$DATE PID=$PID"
          if [[ "${K_ENABLE,,}" == "false" ]]; then
            K_THR=9.9; K_BOOST=0; K_AGGR=0
          fi

          ARGS_COMMON="--base public --dates $DATE --pids $PID \
            --sims $SIMS --topn $TOPN \
            --keyman-threshold $K_THR --keyman-boost $K_BOOST --keyman-aggr $K_AGGR \
            --ml-root TENKAI/predictions/v1 \
            --outdir $OUTDIR"

          [[ "${F_EXCLUDE_FIRST1,,}" == "true" ]] && ARGS_COMMON="$ARGS_COMMON --exclude-first1"
          [[ "${F_ONLY_FIRST1,,}"    == "true" ]] && ARGS_COMMON="$ARGS_COMMON --only-first1"
          [[ "${F_BUY_IN_TOP3,,}"    == "true" ]] && ARGS_COMMON="$ARGS_COMMON --buy-if-keyman-in-top3 --buy-keyman-threshold $F_BUY_THR"

          if [[ "$MODE" == "predict" ]]; then
            python scripts/sims/sims_integrated.py $ARGS_COMMON --predict-only
          else
            ARGS_FILTER=""
            [[ -n "${F_ODDS_BANDS}" ]] && ARGS_FILTER="$ARGS_FILTER --odds-bands \"$F_ODDS_BANDS\""
            [[ -n "${F_ODDS_MIN}"   && "$F_ODDS_MIN" != "0" ]] && ARGS_FILTER="$ARGS_FILTER --odds-min $F_ODDS_MIN"
            [[ -n "${F_ODDS_MAX}"   && "$F_ODDS_MAX" != "0" ]] && ARGS_FILTER="$ARGS_FILTER --odds-max $F_ODDS_MAX"
            [[ "${F_REQUIRE_ODDS,,}" == "true" ]] && ARGS_FILTER="$ARGS_FILTER --require-odds"
            [[ -n "${F_MIN_EV}" && "$F_MIN_EV" != "0" ]] && ARGS_FILTER="$ARGS_FILTER --min-ev $F_MIN_EV"
            eval python scripts/sims/sims_integrated.py $ARGS_COMMON --odds-base public/odds/v1 $ARGS_FILTER
          fi

      - name: Aggregate & write overall.json (overwrite always, robust python)
        env:
          DATE:  ${{ inputs.DATE }}
          MODE:  ${{ inputs.MODE }}
          UNIT:  ${{ inputs.UNIT }}
          SIMS:  ${{ inputs.SIMS }}
          TOPN:  ${{ inputs.TOPN }}
          PID:   ${{ inputs.PID }}
          OUTDIR: ${{ inputs.OUTDIR }}
          # filters
          F_REQUIRE_ODDS:   ${{ steps.parse.outputs.F_REQUIRE_ODDS }}
          F_MIN_EV:         ${{ steps.parse.outputs.F_MIN_EV }}
          F_ODDS_BANDS:     ${{ steps.parse.outputs.F_ODDS_BANDS }}
          F_ODDS_MIN:       ${{ steps.parse.outputs.F_ODDS_MIN }}
          F_ODDS_MAX:       ${{ steps.parse.outputs.F_ODDS_MAX }}
          F_EXCLUDE_FIRST1: ${{ steps.parse.outputs.F_EXCLUDE_FIRST1 }}
          F_ONLY_FIRST1:    ${{ steps.parse.outputs.F_ONLY_FIRST1 }}
          F_BUY_IN_TOP3:    ${{ steps.parse.outputs.F_BUY_IN_TOP3 }}
          F_BUY_THR:        ${{ steps.parse.outputs.F_BUY_THR }}
          # keyman
          K_ENABLE: ${{ steps.parse.outputs.K_ENABLE }}
          K_THR:    ${{ steps.parse.outputs.K_THR }}
          K_BOOST:  ${{ steps.parse.outputs.K_BOOST }}
          K_AGGR:   ${{ steps.parse.outputs.K_AGGR }}
        run: |
          set -euo pipefail
          python - <<'PY'
import os, json, csv
from pathlib import Path

OUTDIR=os.environ["OUTDIR"]; DATE=os.environ["DATE"]; MODE=os.environ["MODE"]
UNIT=float(os.environ["UNIT"]); SIMS=int(os.environ["SIMS"]); TOPN=int(os.environ["TOPN"]); PID=os.environ["PID"]

def tf(x): return str(x).strip().lower()=="true"

filters={
  "require_odds": tf(os.environ.get("F_REQUIRE_ODDS","false")),
  "min_ev": float(os.environ.get("F_MIN_EV","0") or 0),
  "odds_bands": os.environ.get("F_ODDS_BANDS","") or "",
  "odds_min": float(os.environ.get("F_ODDS_MIN","0") or 0),
  "odds_max": float(os.environ.get("F_ODDS_MAX","0") or 0),
  "exclude_first1": tf(os.environ.get("F_EXCLUDE_FIRST1","false")),
  "only_first1": tf(os.environ.get("F_ONLY_FIRST1","false")),
  "buy_in_top3": tf(os.environ.get("F_BUY_IN_TOP3","false")),
  "buy_thr": float(os.environ.get("F_BUY_THR","0.7") or 0.7),
}

keyman={
  "enable": tf(os.environ.get("K_ENABLE","true")),
  "threshold": float(os.environ.get("K_THR","0.7") or 0.7),
  "boost": float(os.environ.get("K_BOOST","0.15") or 0.15),
  "aggr": float(os.environ.get("K_AGGR","0.0") or 0.0),
}

pass2=Path(OUTDIR)/"pass2"
pass2.mkdir(parents=True, exist_ok=True)
csv_path=pass2/"per_race_results.csv"

races=bets=stake=payout=hits=0
if csv_path.exists():
  with csv_path.open(newline='', encoding='utf-8') as f:
    for r in csv.DictReader(f):
      races+=1
      bets+=int(r.get("bets") or 0)
      stake+=float(r.get("stake") or 0)
      payout+=float(r.get("payout") or 0)
      hits+=int(r.get("hit") or 0)

hit_rate=(hits/races) if races else 0.0
roi=((payout-stake)/stake) if stake>0 else 0.0

overall={
  "date": DATE, "mode": MODE, "pid": PID,
  "races": int(races), "bets_total": int(bets), "unit": int(UNIT),
  "stake_total": int(stake), "hits": int(hits), "hit_rate": float(hit_rate),
  "payout_total": int(payout), "roi": float(roi),
  "options": {
    "sims": int(SIMS), "topn": int(TOPN),
    "filters": filters, "keyman": keyman
  }
}
out_path=pass2/"overall.json"
out_path.write_text(json.dumps(overall, ensure_ascii=False, indent=2), encoding="utf-8")
print(f"[overall] wrote {out_path}")
PY

      - name: Commit results into repo
        if: always()
        run: |
          set -e
          git config user.name  github-actions
          git config user.email github-actions@github.com
          git add ${{ inputs.OUTDIR }}/pass2 || true
          git commit -m "wf_pass3: write overall.json for ${{ inputs.DATE }} PID=${{ inputs.PID }}" || echo "nothing to commit"
          git push || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wf_pass3_outputs_${{ inputs.DATE }}_${{ inputs.PID }}
          path: |
            ${{ inputs.OUTDIR }}/pass2/**
