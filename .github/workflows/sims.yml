name: SimS v1 Runner (unified)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "predict or eval"
        required: true
        default: predict
      dates:
        description: "YYYYMMDDをカンマ区切り"
        required: true
      pids:
        description: "場コード(空=全場)"
        default: ""
      races:
        description: "レース(空=全レース)"
        default: ""
      sims:
        description: "試行回数（predict/eval共通）"
        default: "1200"
      topn:
        description: "上位N（predict/eval共通）"
        default: "18"
      unit:
        description: "均等購入額（eval用）"
        default: "100"
      limit:
        description: "先頭からNレースだけ処理（0なら全件）"
        default: "0"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install numpy pandas

      - name: Clean output dirs
        run: |
          rm -rf ./predict ./out
          mkdir -p ./predict ./out

      # ---- predict: TOPNのみを ./predict に出力（毎回上書き） ----
      - name: Predict (TOPN, same engine as eval)
        if: ${{ github.event.inputs.mode == 'predict' }}
        run: |
          python sims_batch_eval_SimS_v1.py \
            --base ./public \
            --dates "${{ github.event.inputs.dates }}" \
            --sims  "${{ github.event.inputs.sims }}" \
            --topn  "${{ github.event.inputs.topn }}" \
            --pids  "${{ github.event.inputs.pids }}" \
            --races "${{ github.event.inputs.races }}" \
            --limit "${{ github.event.inputs.limit }}" \
            --predict-only

      # ★ 変更：Discord に「コンパクト表記の買い目」＋ CSV を送信
      - name: Notify Discord (predict)
        if: ${{ github.event.inputs.mode == 'predict' }}
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DATES:   ${{ github.event.inputs.dates }}
          PIDS:    ${{ github.event.inputs.pids }}
          RACES:   ${{ github.event.inputs.races }}
          SIMS:    ${{ github.event.inputs.sims }}
          TOPN:    ${{ github.event.inputs.topn }}
        run: |
          set -e
          if [ -z "$WEBHOOK" ]; then
            echo "DISCORD_WEBHOOK_URL is not set. Skip notify."
            exit 0
          fi
          if [ ! -s "./predict/predictions_summary.csv" ]; then
            echo "No predictions_summary.csv. Skip notify."
            exit 0
          fi

          python - << 'PY' > ./predict/discord_message.txt
import csv, itertools
from collections import defaultdict

def parse_ticket(s):  # "1-2-3" -> (1,2,3)
    return tuple(int(x) for x in s.split("-"))

def compact_lines(tickets):
    """
    tickets: list[(a,b,c)]
    まとめ方の優先順:
      1) a-b 固定で c を束ねる  => a-b-[c1,c2,...]
      2) a-c 固定で b を束ねる  => a-[b1,b2,...]-c
      3) b-c 固定で a を束ねる  => [a1,a2,...]-b-c
      4) 残りは a-b-c のまま
    """
    remain = set(tickets)
    out = []

    # 1) a-b -> cs
    key = defaultdict(list)
    for a,b,c in list(remain):
        key[(a,b)].append(c)
    for (a,b), cs in list(key.items()):
        cs = sorted(set(cs))
        if len(cs) >= 2:
            for c in cs: remain.discard((a,b,c))
            out.append(f"{a}-{b}-[{','.join(map(str,cs))}]")

    # 2) a-c -> bs
    key = defaultdict(list)
    for a,b,c in list(remain):
        key[(a,c)].append(b)
    for (a,c), bs in list(key.items()):
        bs = sorted(set(bs))
        if len(bs) >= 2:
            for b in bs: remain.discard((a,b,c))
            out.append(f"{a}-[{','.join(map(str,bs))}]-{c}")

    # 3) b-c -> as
    key = defaultdict(list)
    for a,b,c in list(remain):
        key[(b,c)].append(a)
    for (b,c), als in list(key.items()):
        als = sorted(set(als))
        if len(als) >= 2:
            for a in als: remain.discard((a,b,c))
            out.append(f"[{','.join(map(str,als))}]-{b}-{c}")

    # 4) 残り
    for a,b,c in sorted(remain):
        out.append(f"{a}-{b}-{c}")
    return out

# CSV 読み込み
rows=[]
with open("./predict/predictions_summary.csv", newline="", encoding="utf-8") as f:
    rdr=csv.DictReader(f)
    rows=list(rdr)

rows.sort(key=lambda r:(r["date"], r["pid"], r["race"], int(r["rank"])))

LIMIT = 1800  # 本文長の安全上限
body=[]
used=0

for (date,pid,race), grp in itertools.groupby(rows, key=lambda r:(r["date"],r["pid"],r["race"])):
    g=list(grp)
    tickets=[parse_ticket(r["ticket"]) for r in g]
    comp=compact_lines(tickets)

    header=f"[{date} #{pid} {race}]"
    body.append(header); used += len(header)+1

    line=""
    for part in comp:
        add = (", " if line else "") + part
        if len(line)+len(add) > 120:
            body.append("  " + line); used += len(line)+3
            line = part
        else:
            line += add
    if line:
        body.append("  " + line); used += len(line)+3

    if used > LIMIT:
        body.append("...（本文は省略、CSVを参照）")
        break

title = "SimS v1 Predict — Compact TOPN"
meta  = f"dates={ '${{ env.DATES }}' } | pid='{ '${{ env.PIDS }}' }' | races='{ '${{ env.RACES }}' }' | sims={ '${{ env.SIMS }}' } | topN={ '${{ env.TOPN }}' }"
content = "**"+title+"**\n"+meta+"\n```text\n" + "\n".join(body) + "\n```"
content = content.replace("\\","\\\\").replace('"','\\"')
print(content)
PY

          CONTENT="$(cat ./predict/discord_message.txt)"
          # 本文
          curl -sS -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\":\"${CONTENT}\"}" \
               "$WEBHOOK" || true
          # CSV添付
          curl -sS -X POST \
               -F "payload_json={\"content\":\"predictions_summary.csv を添付します\"}" \
               -F "file1=@./predict/predictions_summary.csv" \
               "$WEBHOOK" || true

      # 既存：predict をリポジトリにコミット & プッシュ
      - name: Commit predict folder to repo
        if: ${{ github.event.inputs.mode == 'predict' }}
        run: |
          set -e
          if [ -z "$(ls -A ./predict)" ]; then
            echo "predict/ is empty. Nothing to commit."
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A predict
          git commit -m "chore(predict): ${{ github.event.inputs.dates }} ${{ github.event.inputs.pids }} ${{ github.event.inputs.races }} (topN=${{ github.event.inputs.topn }}, sims=${{ github.event.inputs.sims }})" || echo "No changes to commit"
          git push

      - name: Upload predict artifact
        if: ${{ github.event.inputs.mode == 'predict' }}
        uses: actions/upload-artifact@v4
        with:
          name: sims_outputs
          path: ./predict
          if-no-files-found: error

      # ---- eval: ROI集計を ./out に出力 ----
      - name: Eval (ROI)
        if: ${{ github.event.inputs.mode == 'eval' }}
        run: |
          python sims_batch_eval_SimS_v1.py \
            --base ./public \
            --dates "${{ github.event.inputs.dates }}" \
            --sims  "${{ github.event.inputs.sims }}" \
            --topn  "${{ github.event.inputs.topn }}" \
            --unit  "${{ github.event.inputs.unit }}" \
            --limit "${{ github.event.inputs.limit }}" \
            --outdir ./out

      - name: Upload eval artifact
        if: ${{ github.event.inputs.mode == 'eval' }}
        uses: actions/upload-artifact@v4
        with:
          name: sims_outputs
          path: ./out
          if-no-files-found: error
