name: SimS v1 Runner (unified)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "predict or eval"
        required: true
        default: predict
      dates:
        description: "YYYYMMDDをカンマ区切り"
        required: true
      pids:
        description: "場コード(空=全場)"
        default: ""
      races:
        description: "レース(空=全レース)"
        default: ""
      sims:
        description: "試行回数（predict/eval共通）"
        default: "1200"
      topn:
        description: "上位N（predict/eval共通）"
        default: "18"
      unit:
        description: "均等購入額（eval用）"
        default: "100"
      limit:
        description: "先頭からNレースだけ処理（0なら全件）"
        default: "0"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # predict を push するため

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install numpy pandas

      - name: Clean output dirs
        run: |
          rm -rf ./predict ./out
          mkdir -p ./predict ./out

      # ---- predict: TOPNのみを ./predict に出力（毎回上書き） ----
      - name: Predict (TOPN, same engine as eval)
        if: ${{ github.event.inputs.mode == 'predict' }}
        run: |
          python sims_batch_eval_SimS_v1.py \
            --base ./public \
            --dates "${{ github.event.inputs.dates }}" \
            --sims  "${{ github.event.inputs.sims }}" \
            --topn  "${{ github.event.inputs.topn }}" \
            --pids  "${{ github.event.inputs.pids }}" \
            --races "${{ github.event.inputs.races }}" \
            --limit "${{ github.event.inputs.limit }}" \
            --predict-only

      # ---- Discord 送信用の本文を生成（18点は 1-2-3/5 形式で圧縮） ----
      - name: Build Discord message (compact tickets)
        if: ${{ github.event.inputs.mode == 'predict' }}
        env:
          TOPN:  ${{ github.event.inputs.topn }}
          SIMS:  ${{ github.event.inputs.sims }}
          DATES: ${{ github.event.inputs.dates }}
          PIDS:  ${{ github.event.inputs.pids }}
          RACES: ${{ github.event.inputs.races }}
        run: |
          set -e
          if [ ! -s "./predict/predictions_summary.csv" ]; then
            echo "No predictions_summary.csv -> skip building message."
            exit 0
          fi

          # heredoc を使わず echo で安全にスクリプト生成
          : > build_discord_message.py
          echo 'import os, csv' >> build_discord_message.py
          echo 'from collections import defaultdict' >> build_discord_message.py
          echo 'csv_path = "./predict/predictions_summary.csv"' >> build_discord_message.py
          echo 'topn  = int(os.environ.get("TOPN", "18"))' >> build_discord_message.py
          echo 'rows = []' >> build_discord_message.py
          echo 'with open(csv_path, newline="", encoding="utf-8") as f:' >> build_discord_message.py
          echo '    for r in csv.DictReader(f):' >> build_discord_message.py
          echo '        rows.append(r)' >> build_discord_message.py
          echo 'by_race = defaultdict(list)' >> build_discord_message.py
          echo 'for r in rows:' >> build_discord_message.py
          echo '    if int(r.get("rank", 9999)) <= topn:' >> build_discord_message.py
          echo '        key = (r["date"], r["pid"], r["race"])' >> build_discord_message.py
          echo '        by_race[key].append(r["ticket"])' >> build_discord_message.py
          echo 'def compact_tickets(tickets):' >> build_discord_message.py
          echo '    from collections import defaultdict' >> build_discord_message.py
          echo '    buckets = defaultdict(list); keep = []' >> build_discord_message.py
          echo '    for t in tickets:' >> build_discord_message.py
          echo '        parts = t.split("-")' >> build_discord_message.py
          echo '        if len(parts) == 3:' >> build_discord_message.py
          echo '            buckets[(parts[0], parts[1])].append(parts[2])' >> build_discord_message.py
          echo '        else:' >> build_discord_message.py
          echo '            keep.append(t)' >> build_discord_message.py
          echo '    out = []' >> build_discord_message.py
          echo '    for (a,b), tails in buckets.items():' >> build_discord_message.py
          echo '        tails = sorted(set(tails))' >> build_discord_message.py
          echo '        if len(tails) == 1:' >> build_discord_message.py
          echo '            out.append(f"{a}-{b}-{tails[0]}")' >> build_discord_message.py
          echo '        else:' >> build_discord_message.py
          echo '            out.append(f"{a}-{b}-" + "/".join(tails))' >> build_discord_message.py
          echo '    out.extend(keep); return out' >> build_discord_message.py
          echo 'lines = [f"**SimS v1 Predict**  dates={os.environ.get(\"DATES\")}  pid='\''{os.environ.get(\"PIDS\")}'\''  races='\''{os.environ.get(\"RACES\")}'\''  sims={os.environ.get(\"SIMS\")}  topN={topn}"]' >> build_discord_message.py
          echo 'for (d,p,r), tickets in sorted(by_race.items()):' >> build_discord_message.py
          echo '    comp = compact_tickets(tickets)' >> build_discord_message.py
          echo '    lines.append(f"[{d} {p} {r}]  " + "、".join(comp))' >> build_discord_message.py
          echo 'with open("./predict/discord_message.txt", "w", encoding="utf-8") as f:' >> build_discord_message.py
          echo '    f.write("\n".join(lines))' >> build_discord_message.py

          python build_discord_message.py

      # ---- Discord に本文 + CSV を通知 ----
      - name: Notify Discord (predict)
        if: ${{ github.event.inputs.mode == 'predict' }}
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -e
          if [ -z "$WEBHOOK" ]; then
            echo "DISCORD_WEBHOOK_URL is not set. Skip notify."
            exit 0
          fi
          if [ ! -s "./predict/discord_message.txt" ]; then
            echo "No discord_message.txt. Skip notify."
            exit 0
          fi

          # 本文（JSONは python -c で生成）
          JSON_PAYLOAD=$(python -c "import json,sys; s=open('./predict/discord_message.txt','r',encoding='utf-8').read(); print(json.dumps({'content': s}))")
          echo "$JSON_PAYLOAD" | curl -sS -H "Content-Type: application/json" -X POST -d @- "$WEBHOOK" || true

          # CSV を添付
          if [ -s "./predict/predictions_summary.csv" ]; then
            curl -sS -X POST \
              -F 'payload_json={"content":"predictions_summary.csv を添付します"}' \
              -F "file1=@./predict/predictions_summary.csv" \
              "$WEBHOOK" || true
          fi

      # ---- predict をリポジトリにコミット & プッシュ ----
      - name: Commit predict folder to repo
        if: ${{ github.event.inputs.mode == 'predict' }}
        run: |
          set -e
          if [ -z "$(ls -A ./predict)" ]; then
            echo "predict/ is empty. Nothing to commit."
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A predict
          git commit -m "chore(predict): ${{ github.event.inputs.dates }} ${{ github.event.inputs.pids }} ${{ github.event.inputs.races }} (topN=${{ github.event.inputs.topn }}, sims=${{ github.event.inputs.sims }})" || echo "No changes to commit"
          git push

      - name: Upload predict artifact
        if: ${{ github.event.inputs.mode == 'predict' }}
        uses: actions/upload-artifact@v4
        with:
          name: sims_outputs
          path: ./predict
          if-no-files-found: error

      # ---- eval: ROI集計を ./out に出力 ----
      - name: Eval (ROI)
        if: ${{ github.event.inputs.mode == 'eval' }}
        run: |
          python sims_batch_eval_SimS_v1.py \
            --base ./public \
            --dates "${{ github.event.inputs.dates }}" \
            --sims  "${{ github.event.inputs.sims }}" \
            --topn  "${{ github.event.inputs.topn }}" \
            --unit  "${{ github.event.inputs.unit }}" \
            --limit "${{ github.event.inputs.limit }}" \
            --outdir ./out

      - name: Upload eval artifact
        if: ${{ github.event.inputs.mode == 'eval' }}
        uses: actions/upload-artifact@v4
        with:
          name: sims_outputs
          path: ./out
          if-no-files-found: error
