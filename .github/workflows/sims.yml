name: SimS v1 Runner (unified)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "predict or eval"
        required: true
        default: predict
      dates:
        description: "YYYYMMDDをカンマ区切り"
        required: true
      pids:
        description: "場コード(空=全場)"
        default: ""
      races:
        description: "レース(空=全レース)"
        default: ""
      sims:
        description: "試行回数（predict/eval共通）"
        default: "1200"
      topn:
        description: "上位N（predict/eval共通）"
        default: "18"
      unit:
        description: "均等購入額（eval用）"
        default: "100"
      limit:
        description: "先頭からNレースだけ処理（0なら全件）"
        default: "0"

jobs:
  run:
    runs-on: ubuntu-latest
    # リポジトリに predict/ を push するための権限
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true   # Actions トークンで push 可

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install numpy pandas

      - name: Clean output dirs
        run: |
          rm -rf ./predict ./out
          mkdir -p ./predict ./out

      # ---- predict: TOPNのみを ./predict に出力（毎回上書き） ----
      - name: Predict (TOPN, same engine as eval)
        if: ${{ github.event.inputs.mode == 'predict' }}
        run: |
          python sims_batch_eval_SimS_v1.py \
            --base ./public \
            --dates "${{ github.event.inputs.dates }}" \
            --sims  "${{ github.event.inputs.sims }}" \
            --topn  "${{ github.event.inputs.topn }}" \
            --pids  "${{ github.event.inputs.pids }}" \
            --races "${{ github.event.inputs.races }}" \
            --limit "${{ github.event.inputs.limit }}" \
            --predict-only

      # === 追加: Discord 通知（predict時のみ） =========================
      # ・predictions_summary.csv から各レースの買い目(上位N=18)を抽出
      # ・「1-2-3, 1-2-5, 1-2-6」などは「1-2-3/5/6」にコンパクト化
      # ・2000文字制限に収まらない場合は分割して複数メッセージ送信
      # ・Webhook URL はリポジトリのシークレット DISCORD_WEBHOOK_URL に設定
      # =================================================================
      - name: Build Discord message (compact tickets)
        if: ${{ github.event.inputs.mode == 'predict' }}
        env:
          TOPN:  ${{ github.event.inputs.topn }}
          SIMS:  ${{ github.event.inputs.sims }}
          DATES: ${{ github.event.inputs.dates }}
          PIDS:  ${{ github.event.inputs.pids }}
          RACES: ${{ github.event.inputs.races }}
        run: |
          set -e
          if [ ! -s "./predict/predictions_summary.csv" ]; then
            echo "No predictions_summary.csv -> skip building message."
            exit 0
          fi

          python - <<'PY'
import os, csv, textwrap, json
from collections import defaultdict, OrderedDict

csv_path = "./predict/predictions_summary.csv"
topn  = int(os.environ.get("TOPN", "18"))
sims  = os.environ.get("SIMS", "?")
dates = os.environ.get("DATES","")
pids  = os.environ.get("PIDS","")
races = os.environ.get("RACES","")

# 読み込み：date,pid,race,rank,ticket,prob
rows = []
with open(csv_path, newline="", encoding="utf-8") as f:
    for r in csv.DictReader(f):
        rows.append(r)

# レース単位にまとめ、rank<=TOPN の ticket を集める
by_race = defaultdict(list)
for r in rows:
    if int(r.get("rank", 9999)) <= topn:
        key = (r["date"], r["pid"], r["race"])
        by_race[key].append(r["ticket"])

def compact_tickets(tickets):
    """
    簡易コンパクト化：
      1) 先頭2つが同じものは 1-2-3/5/6 形式にまとめる
      2) 上記以外はそのまま
    """
    buckets = defaultdict(list)
    keep = []
    for t in tickets:
        parts = t.split("-")
        if len(parts) == 3:
            buckets[(parts[0], parts[1])].append(parts[2])
        else:
            keep.append(t)

    out = []
    for (a,b), tails in buckets.items():
        # 1-2-3 のような単体のみなら通常表記、複数なら 1-2-3/5/6
        tails = sorted(set(tails), key=lambda x: int(x) if x.isdigit() else x)
        if len(tails) == 1:
            out.append(f"{a}-{b}-{tails[0]}")
        else:
            out.append(f"{a}-{b}-" + "/".join(tails))
    out.extend(keep)
    return out

lines = []
header = f"**SimS v1 Predict**  dates={dates}  pid='{pids}'  races='{races}'  sims={sims}  topN={topn}"
lines.append(header)

for (d,p,r), tickets in sorted(by_race.items()):
    comp = compact_tickets(tickets)
    body = "、".join(comp)  # 全角カンマで見やすく
    lines.append(f"[{d} {p} {r}]  {body}")

# 2000文字制限に合わせて分割
joined = "\n".join(lines)
chunks = []
buf = ""
for line in joined.split("\n"):
    if len(buf) + len(line) + 1 > 1800:  # 余裕を見て 1800
        chunks.append(buf)
        buf = line
    else:
        buf = (buf + "\n" + line) if buf else line
if buf:
    chunks.append(buf)

# 出力ファイル（ワークフロー後段で送信・記録用）
os.makedirs("./predict", exist_ok=True)
with open("./predict/discord_message.txt", "w", encoding="utf-8") as f:
    for i, c in enumerate(chunks, 1):
        if len(chunks) > 1:
            f.write(f"(part {i}/{len(chunks)})\n")
        f.write(c.strip() + "\n\n")

# ついでにコンパクト表だけのテキストも落としておく
with open("./predict/predictions_compact.txt", "w", encoding="utf-8") as f:
    for (d,p,r), tickets in sorted(by_race.items()):
        comp = compact_tickets(tickets)
        f.write(f"{d} {p} {r} : " + "、".join(comp) + "\n")
PY

      - name: Notify Discord (predict)
        if: ${{ github.event.inputs.mode == 'predict' }}
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -e
          if [ -z "$WEBHOOK" ]; then
            echo "DISCORD_WEBHOOK_URL is not set. Skip notify."
            exit 0
          fi
          if [ ! -s "./predict/discord_message.txt" ]; then
            echo "No discord_message.txt. Skip notify."
            exit 0
          fi

          # 本文（複数パートの場合は順次送信）
          while IFS= read -r block || [ -n "$block" ]; do
            # 空行でメッセージ区切り
            if [ -z "$block" ]; then
              continue
            fi
            # JSON のためのエスケープ
            esc=$(printf "%s" "$block" | python - <<'PY'
import sys, json
print(json.dumps({"c": sys.stdin.read()})["c"])
PY
)
            curl -sS -H "Content-Type: application/json" \
                 -X POST \
                 -d "{\"content\": ${esc}}" \
                 "$WEBHOOK" >/dev/null 2>&1 || true
          done < <(awk '1; /^$/{print ""}' ./predict/discord_message.txt)

          # 参考用に CSV も添付
          if [ -s "./predict/predictions_summary.csv" ]; then
            curl -sS -X POST \
                 -F "payload_json={\"content\":\"predictions_summary.csv を添付します\"}" \
                 -F "file1=@./predict/predictions_summary.csv" \
                 "$WEBHOOK" >/dev/null 2>&1 || true
          fi

      # 既存：predict をリポジトリにコミット & プッシュ
      - name: Commit predict folder to repo
        if: ${{ github.event.inputs.mode == 'predict' }}
        run: |
          set -e
          if [ -z "$(ls -A ./predict)" ]; then
            echo "predict/ is empty. Nothing to commit."
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A predict
          git commit -m "chore(predict): ${{ github.event.inputs.dates }} ${{ github.event.inputs.pids }} ${{ github.event.inputs.races }} (topN=${{ github.event.inputs.topn }}, sims=${{ github.event.inputs.sims }})" || echo "No changes to commit"
          git push

      - name: Upload predict artifact
        if: ${{ github.event.inputs.mode == 'predict' }}
        uses: actions/upload-artifact@v4
        with:
          name: sims_outputs
          path: ./predict
          if-no-files-found: error

      # ---- eval: ROI集計を ./out に出力 ----
      - name: Eval (ROI)
        if: ${{ github.event.inputs.mode == 'eval' }}
        run: |
          python sims_batch_eval_SimS_v1.py \
            --base ./public \
            --dates "${{ github.event.inputs.dates }}" \
            --sims  "${{ github.event.inputs.sims }}" \
            --topn  "${{ github.event.inputs.topn }}" \
            --unit  "${{ github.event.inputs.unit }}" \
            --limit "${{ github.event.inputs.limit }}" \
            --outdir ./out

      - name: Upload eval artifact
        if: ${{ github.event.inputs.mode == 'eval' }}
        uses: actions/upload-artifact@v4
        with:
          name: sims_outputs
          path: ./out
          if-no-files-found: error
