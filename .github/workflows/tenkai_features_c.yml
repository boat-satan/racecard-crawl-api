name: Build TENKAI C features

on:
  workflow_dispatch:
    inputs:
      date:
        description: '対象日 (YYYYMMDD)'
        required: true
      pid:
        description: '場コード pid (例: 02)'
        required: true
      race:
        description: 'レース (例: 1R) 空なら全R'
        required: false
        default: ''

permissions:
  contents: write

concurrency:
  group: tenkai-c-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-c-features:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # push衝突を避けるため履歴を取得

      # 先にリモートを取り込んでおく（後段のpush衝突回避）
      - name: Sync with remote (ff-only if possible)
        run: |
          set -Eeuo pipefail
          git fetch --prune origin "+refs/heads/*:refs/remotes/origin/*"
          # main 以外でも ref_name を使って同期
          git checkout "${{ github.ref_name }}"
          # 可能なら fast-forward のみ、無理なら rebase + autostash
          if ! git merge --ff-only "origin/${{ github.ref_name }}"; then
            git pull --rebase --autostash origin "${{ github.ref_name }}"
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # requirements.txt が無ければ最低限だけ
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas
          fi

      - name: Sanity check
        run: |
          test -f TENKAI/features_c.py || { echo "TENKAI/features_c.py がありません"; exit 1; }

      - name: Ensure TENKAI package
        run: |
          mkdir -p TENKAI
          [ -f TENKAI/__init__.py ] || printf "" > TENKAI/__init__.py

      # JSONのキー読み取りをログに出す（回帰チェック用）
      - name: Sanity: echo essentials from JSON (if race specified)
        if: ${{ github.event.inputs.race != '' }}
        run: |
          set -Eeuo pipefail
          target="public/integrated/v1/${{ github.event.inputs.date }}/${{ github.event.inputs.pid }}/${{ github.event.inputs.race }}.json"
          if [ -f "$target" ]; then
            echo ">>> $target"
            jq -r '
              .entries[]
              | {
                  lane:.lane,
                  ec_avgST:(.stats.entryCourse.avgST),
                  class:(.racecard.classNumber),
                  win_k:((.stats.entryCourse.winKimariteSelf // {})
                         | to_entries
                         | map(select(.key=="逃げ" or .key=="差し" or .key=="まくり" or .key=="まくり差し")|.value)
                         | add // 0),
                  lose_k:((.stats.entryCourse.loseKimarite // {})
                          | to_entries
                          | map(select(.key=="逃げ" or .key=="差し" or .key=="まくり" or .key=="まくり差し")|.value)
                          | add // 0)
                }
              | @json
            ' "$target"
          else
            echo "no targets: $target"
          fi

      - name: Build C features
        shell: bash
        run: |
          set -Eeuo pipefail
          RACE_OPT=""
          if [ -n "${{ github.event.inputs.race }}" ]; then
            RACE_OPT="--race ${{ github.event.inputs.race }}"
          fi
          echo ">>> 実行コマンド"
          echo python TENKAI/features_c.py --date ${{ github.event.inputs.date }} --pid ${{ github.event.inputs.pid }} $RACE_OPT
          PYTHONPATH="." python TENKAI/features_c.py \
            --date ${{ github.event.inputs.date }} \
            --pid  ${{ github.event.inputs.pid }} \
            $RACE_OPT

      - name: Commit outputs
        run: |
          set -Eeuo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add TENKAI/features_c/v1/** || true
          # 何も変更が無いときはスキップ
          if git diff --cached --quiet; then
            echo "no changes; skip commit."
          else
            git commit -m "TENKAI C features: ${{ github.event.inputs.date }} pid=${{ github.event.inputs.pid }} ${{ github.event.inputs.race }}"
            # push 失敗時は rebase して再試行（自動スタッシュ）
            if ! git push origin "${{ github.ref_name }}"; then
              echo "push rejected; rebasing..."
              git pull --rebase --autostash origin "${{ github.ref_name }}"
              git push origin "${{ github.ref_name }}"
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tenkai-c-${{ github.event.inputs.date }}-${{ github.event.inputs.pid }}${{ github.event.inputs.race && format('-{0}', github.event.inputs.race) || '' }}
          path: TENKAI/features_c/v1/**
          if-no-files-found: warn
