name: Sims Integrated

on:
  workflow_dispatch:
    inputs:
      DATE:
        description: "対象日 (YYYYMMDD)"
        required: true
      MODE:
        description: "predict or eval"
        required: true
        default: predict
      PIDS:
        description: "場コード (カンマ区切り / 空なら全場)"
        required: false
        default: ""
      RACES:
        description: "レース番号 (カンマ区切り / 空なら全レース)"
        required: false
        default: ""
      UNIT:
        description: "1点あたりの金額"
        required: false
        default: "100"
      OUTDIR:
        description: "出力ディレクトリ"
        required: false
        default: TENKAI/predictions/v1

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt || true

      - name: Run TENKAI prediction
        run: |
          python sims.py \
            --date "${{ inputs.DATE }}" \
            --mode "${{ inputs.MODE }}" \
            --pids "${{ inputs.PIDS }}" \
            --races "${{ inputs.RACES }}" \
            --unit "${{ inputs.UNIT }}" \
            --outdir "${{ inputs.OUTDIR }}"

      - name: Show ML CSVs
        run: |
          find ${{ inputs.OUTDIR }}/v1/${{ inputs.DATE }} -maxdepth 3 -type f -name '*.csv' | sort || true

      - name: Run Pass2 (SimS integrated with ML)
        run: |
          set -euo pipefail
          echo ">> starting Pass2"
          # 必要ならここで追加処理
          echo ">> done"

      - name: Aggregate overall (overwrite)
        if: always()
        env:
          DATE:   ${{ inputs.DATE }}
          MODE:   ${{ inputs.MODE }}
          UNIT:   ${{ inputs.UNIT }}
          OUTDIR: ${{ inputs.OUTDIR }}
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, json, glob

          date   = os.environ["DATE"]
          mode   = os.environ["MODE"]
          unit   = int(os.environ["UNIT"])
          outdir = os.environ["OUTDIR"]
          pred_dir = os.path.join(outdir, "pass2", "predict")

          races = 0
          bets_total = 0
          stake_total = 0
          hits = 0
          payout_total = 0

          def load_results(base,date,pid,race):
              root_v1=os.path.join("public","results","v1")
              dirp=os.path.join(root_v1,date,pid)
              if not os.path.isdir(dirp): return {}
              cand=os.path.join(dirp, f"{race if race.endswith('R') else race+'R'}.json")
              if os.path.isfile(cand):
                  return json.load(open(cand,"r",encoding="utf-8"))
              for f in os.listdir(dirp):
                  if not f.lower().endswith(".json"): continue
                  d=json.load(open(os.path.join(dirp,f),"r",encoding="utf-8"))
                  cont=d.get("races", d) if isinstance(d,dict) else {}
                  rk=race if race.endswith("R") else race+"R"
                  if rk in cont: return cont[rk]
              return {}

          def actual_trifecta_and_amount(res):
              trif=(res or {}).get("payouts",{}).get("trifecta")
              combo=None; amt=0
              if isinstance(trif,dict):
                  combo=trif.get("combo"); amt=int(trif.get("amount") or 0)
              if not combo and isinstance(res,dict):
                  order=res.get("order")
                  if isinstance(order,list) and len(order)>=3:
                      def lane(x): return str(x.get("lane") or x.get("course") or x.get("F") or x.get("number"))
                      try:
                          f,s,t=lane(order[0]),lane(order[1]),lane(order[2])
                          if all([f,s,t]): combo=f"{f}-{s}-{t}"
                      except: pass
              return combo, amt

          for f in glob.glob(os.path.join(pred_dir, "pred_*.json")):
              d=json.load(open(f,"r",encoding="utf-8"))
              races += 1
              bets = [x["ticket"] for x in d.get("buylist",[])]
              bets_total += len(bets)
              stake_total += unit * len(bets)
              if mode == "eval":
                  res = load_results("public", d["date"], d["pid"], d["race"])
                  hit_combo, pay = actual_trifecta_and_amount(res)
                  if hit_combo in bets:
                      hits += 1
                      payout_total += int(pay)

          summary = {
            "date": date,
            "mode": mode,
            "races": races,
            "bets_total": bets_total,
            "unit": unit,
            "stake_total": stake_total,
            "hits": hits,
            "hit_rate": (hits / races) if races else 0.0,
            "payout_total": payout_total,
            "roi": ((payout_total - stake_total) / stake_total) if stake_total else 0.0,
          }
          os.makedirs(os.path.join(outdir,"pass2"), exist_ok=True)
          with open(os.path.join(outdir,"pass2","overall.json"),"w",encoding="utf-8") as fp:
            json.dump(summary, fp, ensure_ascii=False, indent=2)
          print(">> wrote", os.path.join(outdir,"pass2","overall.json"))
          PY
