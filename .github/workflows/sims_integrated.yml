name: sims_integrated

on:
  workflow_dispatch:
    inputs:
      DATE:   { description: "YYYYMMDD", required: true,  type: string }
      PID:    { description: "場コード 01..24（カンマ可）", required: true, type: string }
      MODE:   { description: "predict or eval", required: true, default: "predict", type: choice, options: [predict, eval] }
      SIMS:   { description: "試行回数/レース", required: true, default: "600", type: string }
      TOPN:   { description: "三連単 TOPN", required: true, default: "18", type: string }
      UNIT:   { description: "1点あたり(円)", required: true, default: "100", type: string }
      FILTERS: { description: "例: require_odds=true,min_ev=1.2,odds_bands=01-09,10-19", required: false, default: "", type: string }
      KEYMAN:  { description: "例: enable=true,thr=0.7,boost=0.15,aggr=0.0,buy_in_top3=false,buy_thr=0.7", required: false, default: "enable=true,thr=0.7,boost=0.15,aggr=0.0,buy_in_top3=false,buy_thr=0.7", type: string }
      OUTDIR:  { description: "出力ディレクトリ", required: false, default: "scripts/sims", type: string }

permissions:
  contents: write

concurrency:
  group: sims-integrated-${{ github.ref }}-${{ inputs.DATE }}-${{ inputs.PID }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install numpy pandas joblib scikit-learn

      - name: Parse FILTERS & KEYMAN
        id: parse
        env:
          FILTERS: ${{ inputs.FILTERS }}
          KEYMAN:  ${{ inputs.KEYMAN }}
        run: |
          set -euo pipefail
          parse_kvlist () {
            local s="$1"; local prefix="$2"
            IFS=',' read -r -a pairs <<< "$s"
            for kv in "${pairs[@]}"; do
              kv="$(echo "$kv" | xargs)"
              [ -z "$kv" ] && continue
              if [[ "$kv" == *"="* ]]; then
                k="$(echo "${kv%%=*}" | tr '[:lower:]' '[:upper:]' | tr -c 'A-Z0-9_' '_' | xargs)"
                v="$(echo "${kv#*=}" | xargs)"
                echo "$prefix$k=$v" >> $GITHUB_OUTPUT
              fi
            done
          }
          # filter defaults
          echo "F_REQUIRE_ODDS=false" >> $GITHUB_OUTPUT
          echo "F_MIN_EV=0"          >> $GITHUB_OUTPUT
          echo "F_ODDS_BANDS="       >> $GITHUB_OUTPUT
          echo "F_ODDS_MIN=0"        >> $GITHUB_OUTPUT
          echo "F_ODDS_MAX=0"        >> $GITHUB_OUTPUT
          echo "F_EXCLUDE_FIRST1=false" >> $GITHUB_OUTPUT
          echo "F_ONLY_FIRST1=false"    >> $GITHUB_OUTPUT
          echo "F_BUY_IN_TOP3=false"    >> $GITHUB_OUTPUT
          echo "F_BUY_THR=0.7"          >> $GITHUB_OUTPUT
          # keyman defaults
          echo "K_ENABLE=true"   >> $GITHUB_OUTPUT
          echo "K_THR=0.7"       >> $GITHUB_OUTPUT
          echo "K_BOOST=0.15"    >> $GITHUB_OUTPUT
          echo "K_AGGR=0.0"      >> $GITHUB_OUTPUT
          [ -n "${FILTERS:-}" ] && parse_kvlist "$FILTERS" "F_"
          [ -n "${KEYMAN:-}" ]  && parse_kvlist "$KEYMAN"  "K_"

      # 1) Pass1: キーマン抽出（predict-only）
      - name: Run Pass1 (keyman only)
        env:
          DATE:  ${{ inputs.DATE }}
          PID:   ${{ inputs.PID }}
          SIMS:  ${{ inputs.SIMS }}
          TOPN:  ${{ inputs.TOPN }}
          OUTDIR: ${{ inputs.OUTDIR }}
        run: |
          set -euo pipefail
          echo "[pass1] DATE=$DATE PID=$PID"
          python scripts/sims/sims.py \
            --base public \
            --dates "$DATE" \
            --pids "$PID" \
            --sims "$SIMS" \
            --strategy trifecta_topN --topn "$TOPN" \
            --predict-only \
            --outdir "$OUTDIR"

      # 2) ML推論（TENKAI）— 出力は TENKAI/predictions/v1/<DATE>/<pid>/<race>.csv
      - name: Run TENKAI prediction
        env:
          DATE: ${{ inputs.DATE }}
          PID:  ${{ inputs.PID }}
        run: |
          set -euo pipefail
          mkdir -p "TENKAI/predictions/v1/$DATE"
          echo "[tenkai] $DATE / $PID"
          python TENKAI/tenkai_predict_integrated.py \
            --date "$DATE" --pid "$PID"

      - name: Show ML CSVs
        run: |
          find TENKAI/predictions/v1/${{ inputs.DATE }} -maxdepth 2 -type f -name '*.csv' | sort || true

      # 3) Pass2: MLを読み込んだ統合SimS
      - name: Run Pass2 (SimS integrated with ML)
        env:
          DATE:  ${{ inputs.DATE }}
          PID:   ${{ inputs.PID }}
          MODE:  ${{ inputs.MODE }}
          SIMS:  ${{ inputs.SIMS }}
          TOPN:  ${{ inputs.TOPN }}
          OUTDIR: ${{ inputs.OUTDIR }}
          # parsed filters
          F_REQUIRE_ODDS:   ${{ steps.parse.outputs.F_REQUIRE_ODDS }}
          F_MIN_EV:         ${{ steps.parse.outputs.F_MIN_EV }}
          F_ODDS_BANDS:     ${{ steps.parse.outputs.F_ODDS_BANDS }}
          F_ODDS_MIN:       ${{ steps.parse.outputs.F_ODDS_MIN }}
          F_ODDS_MAX:       ${{ steps.parse.outputs.F_ODDS_MAX }}
          F_EXCLUDE_FIRST1: ${{ steps.parse.outputs.F_EXCLUDE_FIRST1 }}
          F_ONLY_FIRST1:    ${{ steps.parse.outputs.F_ONLY_FIRST1 }}
          F_BUY_IN_TOP3:    ${{ steps.parse.outputs.F_BUY_IN_TOP3 }}
          F_BUY_THR:        ${{ steps.parse.outputs.F_BUY_THR }}
          # parsed keyman
          K_ENABLE: ${{ steps.parse.outputs.K_ENABLE }}
          K_THR:    ${{ steps.parse.outputs.K_THR }}
          K_BOOST:  ${{ steps.parse.outputs.K_BOOST }}
          K_AGGR:   ${{ steps.parse.outputs.K_AGGR }}
        run: |
          set -euo pipefail
          echo "[pass2] MODE=$MODE  DATE=$DATE PID=$PID"

          ARGS_COMMON="--base public --dates $DATE --pids $PID \
            --sims $SIMS --topn $TOPN \
            --keyman-threshold $K_THR \
            --keyman-boost $K_BOOST --keyman-aggr $K_AGGR \
            --ml-root TENKAI/predictions/v1 \
            --outdir $OUTDIR"

          # keyman-enable はフラグ
          if [ "${K_ENABLE,,}" = "true" ]; then
            ARGS_COMMON="$ARGS_COMMON --keyman-enable"
          fi

          # optional filters
          [ "${F_EXCLUDE_FIRST1,,}" = "true" ] && ARGS_COMMON="$ARGS_COMMON --exclude-first1"
          [ "${F_ONLY_FIRST1,,}"    = "true" ] && ARGS_COMMON="$ARGS_COMMON --only-first1"
          [ "${F_BUY_IN_TOP3,,}"    = "true" ] && ARGS_COMMON="$ARGS_COMMON --buy-if-keyman-in-top3 --buy-keyman-threshold $F_BUY_THR"

          if [ "$MODE" = "predict" ]; then
            python scripts/sims/sims_integrated.py $ARGS_COMMON --predict-only
          else
            ARGS_FILTER=""
            [ -n "${F_ODDS_BANDS}" ] && ARGS_FILTER="$ARGS_FILTER --odds-bands \"$F_ODDS_BANDS\""
            [ -n "${F_ODDS_MIN}" ]   && [ "$F_ODDS_MIN" != "0" ] && ARGS_FILTER="$ARGS_FILTER --odds-min $F_ODDS_MIN"
            [ -n "${F_ODDS_MAX}" ]   && [ "$F_ODDS_MAX" != "0" ] && ARGS_FILTER="$ARGS_FILTER --odds-max $F_ODDS_MAX"
            [ "${F_REQUIRE_ODDS,,}" = "true" ] && ARGS_FILTER="$ARGS_FILTER --require-odds"
            [ -n "${F_MIN_EV}" ] && [ "$F_MIN_EV" != "0" ] && ARGS_FILTER="$ARGS_FILTER --min-ev $F_MIN_EV"

            eval python scripts/sims/sims_integrated.py $ARGS_COMMON \
              --odds-base public/odds/v1 $ARGS_FILTER
          fi

      - name: Commit results into repo
        if: always()
        run: |
          set -e
          git config user.name  github-actions
          git config user.email github-actions@github.com
          git add ${{ inputs.OUTDIR }}/pass1 ${{ inputs.OUTDIR }}/pass2 TENKAI/predictions/v1/${{ inputs.DATE }} || true
          git commit -m "sims_integrated: ${{ inputs.MODE }} DATE=${{ inputs.DATE }} PID=${{ inputs.PID }}" || echo "nothing to commit"
          git push || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sims_outputs_${{ inputs.DATE }}_${{ inputs.PID }}
          path: |
            ${{ inputs.OUTDIR }}/pass1/**
            ${{ inputs.OUTDIR }}/pass2/**
            TENKAI/predictions/v1/${{ inputs.DATE }}/**
