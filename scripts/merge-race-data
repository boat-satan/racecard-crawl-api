// scripts/merge-race-data.js
// Node.js v20 / ESM
// 目的: 出走表 + 展示データ + スタッツを統合して保存
//
// 実行例:
//   TARGET_DATE=20250810 TARGET_PID=04 TARGET_RACE=1 node scripts/merge-race-data.js

import fs from "node:fs/promises";
import path from "node:path";

const ROOT = process.cwd();
const to2 = (s) => String(s).padStart(2, "0");

const DATE = (process.env.TARGET_DATE || "today").replace(/-/g, "");
const PID = to2(process.env.TARGET_PID || "02");
const RACE = `${String(process.env.TARGET_RACE || "1").replace(/[^\d]/g, "")}R`;

// --- ファイルパスヘルパ ---
const programPath = path.join(ROOT, "public", "programs", "v1", DATE, PID, `${RACE}.json`);
const exhibitionPath = path.join(ROOT, "public", "exhibition", "v1", DATE, PID, `${RACE}.json`);

// --- JSON読み込み ---
async function loadJson(file) {
  const txt = await fs.readFile(file, "utf8");
  return JSON.parse(txt);
}

// --- メイン処理 ---
async function main() {
  // 1. 出走表データ
  const program = await loadJson(programPath);

  // 2. 展示データ
  const exhibition = await loadJson(exhibitionPath);

  // 3. スタッツ（進入コースごとに抽出）
  const statsDir = path.join(ROOT, "public", "stats", "v2", "racers");
  const stats = {};
  for (const entry of exhibition.entries) {
    if (!entry.number || !entry.exhibition?.startCourse) continue;
    const regno = entry.number;
    const course = entry.exhibition.startCourse;

    const statPath = path.join(statsDir, `${regno}.json`);
    try {
      const statData = await loadJson(statPath);
      stats[regno] = {
        courseStats: statData.course?.[course] || null,
        rankStats: statData.rank || null, // 展示順位別データ
      };
    } catch {
      console.warn(`No stats for racer ${regno}`);
    }
  }

  // 4. 統合データ生成
  const merged = {
    date: DATE,
    pid: PID,
    race: RACE,
    generatedAt: new Date().toISOString(),
    program,
    exhibition,
    stats,
  };

  // 5. 保存
  const outDir = path.join(ROOT, "public", "merged", "v1", DATE, PID);
  await fs.mkdir(outDir, { recursive: true });
  const outFile = path.join(outDir, `${RACE}.json`);
  await fs.writeFile(outFile, JSON.stringify(merged, null, 2), "utf8");
  console.log("write:", path.relative(ROOT, outFile));
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
